name: CI/CD Pipeline

concurrency:
  group: ci-cd-pipeline-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  spellcheck:
    name: "🧪 Spellcheck README"
    runs-on: ubuntu-latest
    outputs:
      spellcheck_issues: ${{ steps.spell.outputs.spellcheck_issues }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        continue-on-error: true

      - id: spell
        name: Run cspell on README
        run: |
          echo "Spellchecking README.md..."
          npx cspell "README.md"
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "spellcheck_issues=true" >> $GITHUB_OUTPUT
          else
            echo "spellcheck_issues=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

  markdownlint:
    name: "📐 Markdown Lint README"
    runs-on: ubuntu-latest
    outputs:
      markdownlint_issues: ${{ steps.lint.outputs.markdownlint_issues }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        continue-on-error: true

      - id: lint
        name: Run markdownlint on README
        run: |
          echo "Linting README.md..."
          npx markdownlint-cli "README.md"
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "markdownlint_issues=true" >> $GITHUB_OUTPUT
          else
            echo "markdownlint_issues=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

  prettier-check:
    name: "🎨 Prettier Check README"
    runs-on: ubuntu-latest
    outputs:
      prettier_issues: ${{ steps.check.outputs.prettier_issues }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        continue-on-error: true

      - id: check
        name: Check formatting with Prettier
        run: |
          echo "Checking README.md formatting..."
          npx prettier --check "README.md"
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "prettier_issues=true" >> $GITHUB_OUTPUT
          else
            echo "prettier_issues=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

  link-check:
    name: "🔗 Link Validation README"
    runs-on: ubuntu-latest
    outputs:
      linkcheck_issues: ${{ steps.link.outputs.linkcheck_issues }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
        continue-on-error: true

      - id: link
        name: Validate links in README
        run: |
          echo "Checking links in README.md..."
          npx markdown-link-check "README.md" -q
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "linkcheck_issues=true" >> $GITHUB_OUTPUT
          else
            echo "linkcheck_issues=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

  summary:
    name: "📊 Aggregate Summary"
    runs-on: ubuntu-latest
    needs: [spellcheck, markdownlint, prettier-check, link-check]
    if: always()
    steps:
      - name: Summary of README checks
        run: |
          echo "===== README Quality Summary ====="
          echo "Spellcheck issues:         ${{ needs.spellcheck.outputs.spellcheck_issues }}"
          echo "Markdownlint issues:       ${{ needs.markdownlint.outputs.markdownlint_issues }}"
          echo "Prettier formatting issues:${{ needs['prettier-check'].outputs.prettier_issues }}"
          echo "Link check issues:         ${{ needs.link-check.outputs.linkcheck_issues }}"
          echo "=================================="
          # Optionally add logic to highlight if any are true (but do not fail)
          any_issue=false
          if [ "${{ needs.spellcheck.outputs.spellcheck_issues }}" = "true" ] || \
             [ "${{ needs.markdownlint.outputs.markdownlint_issues }}" = "true" ] || \
             [ "${{ needs['prettier-check'].outputs.prettier_issues }}" = "true" ] || \
             [ "${{ needs.link-check.outputs.linkcheck_issues }}" = "true" ]; then
            any_issue=true
          fi
          if [ "$any_issue" = "true" ]; then
            echo "One or more checks reported issues. Review above output."; 
          else
            echo "All checks passed with no reported issues.";
          fi

  complete:
    name: "🎉 Pipeline Complete"
    runs-on: ubuntu-latest
    needs: [summary]
    if: always()
    steps:
      - name: Final status
        run: echo "✅ README quality pipeline finished (all checks non-blocking)."
